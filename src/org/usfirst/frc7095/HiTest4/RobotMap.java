// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7095.HiTest4;

import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

public class RobotMap {
    public static SpeedController baseLeftFront;
    public static SpeedController baseLeftRear;
    public static SpeedControllerGroup baseLeftControllerGroup;
    public static SpeedController baseRightFront;
    public static SpeedController baseRightRear;
    public static SpeedControllerGroup baseRightControllerGroup;
    public static DifferentialDrive baseDrive;
    public static SpeedController suckerLeft;
    public static SpeedController suckerRight;
    public static SpeedController wingLeft;
    public static SpeedController wingRight;

    public static void init() {
        baseLeftFront = new Spark(0);
        LiveWindow.addActuator("Base", "leftFront", (Spark) baseLeftFront);
        baseLeftFront.setInverted(false);
        baseLeftRear = new Spark(1);
        LiveWindow.addActuator("Base", "leftRear", (Spark) baseLeftRear);
        baseLeftRear.setInverted(false);
        baseLeftControllerGroup = new SpeedControllerGroup(baseLeftFront, baseLeftRear);
        LiveWindow.addActuator("Base", "leftControllerGroup", baseLeftControllerGroup);
        baseRightFront = new Spark(2);
        LiveWindow.addActuator("Base", "rightFront", (Spark) baseRightFront);
        baseRightFront.setInverted(false);
        baseRightRear = new Spark(3);
        LiveWindow.addActuator("Base", "rightRear", (Spark) baseRightRear);
        baseRightRear.setInverted(false);
        baseRightControllerGroup = new SpeedControllerGroup(baseRightFront, baseRightRear);
        LiveWindow.addActuator("Base", "rightControllerGroup", baseRightControllerGroup);
        baseDrive = new DifferentialDrive(baseLeftControllerGroup, baseRightControllerGroup);
        LiveWindow.addActuator("Base", "baseDrive", baseDrive);
        baseDrive.setSafetyEnabled(true);
        baseDrive.setExpiration(0.1);
        baseDrive.setMaxOutput(1.0);
        suckerLeft = new Spark(4);
        LiveWindow.addActuator("Sucker", "left", (Spark) suckerLeft);
        suckerLeft.setInverted(false);
        suckerRight = new Spark(5);
        LiveWindow.addActuator("Sucker", "right", (Spark) suckerRight);
        suckerRight.setInverted(false);
        wingLeft = new Spark(6);
        LiveWindow.addActuator("Wing", "left", (Spark) wingLeft);
        wingLeft.setInverted(false);
        wingRight = new Spark(7);
        LiveWindow.addActuator("Wing", "right", (Spark) wingRight);
        wingRight.setInverted(false);
    }
}
